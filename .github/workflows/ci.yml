on:
  pull_request:
    types: [review_requested, opened]
    branches:    
      - 'releases/**'
  push:
    branches:    
      - 'main'
      - 'releases/**'
      - 'testing_**'
      - 'feat_**'
      - 'fix_**'
concurrency:
  group: ${{ github.workflow }}-${{ !contains(github.event.pull_request.labels.*.name, 'test-flaky-ci') && github.head_ref || github.run_id }}
  cancel-in-progress: true

name: FTL CI
jobs:
  build:
    name: ${{ matrix.job }} ${{ matrix.profile }} ${{ matrix.os }}
    if: |
      github.event_name == 'push' ||
      !startsWith(github.event.pull_request.head.label, 'hironichu:')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      matrix:
        include:
          - os: macos-latest
            job: test
            profile: debug
          - os: macos-latest
            job: test
            profile: release
          - os: windows-latest
            job: test
            profile: debug
          - os: windows-latest
            job: test
            profile: release
          - os: 'ubuntu-22.04'
            job: test
            profile: release
            use_sysroot: true
          - os: 'ubuntu-22.04'
            job: test
            profile: debug
          - os: 'ubuntu-22.04'
            job: lint
            profile: debug
          - os: 'self-hosted'
            job: test
            profile: debug
          - os: 'self-hosted'
            job: test
            profile: release
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')) }}
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: full
    steps:
      - name: Configure git
        run: |
          git config --global core.symlinks true
          git config --global fetch.parallel 16
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: recursive
      - name: Create source tarballs (release, linux)
        if: |
          startsWith(matrix.os, 'ubuntu') &&
          matrix.profile == 'release' &&
          matrix.job == 'test' &&
          github.repository == 'hironichu/FTL' &&
          startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p target/release
          tar --exclude=".git*" --exclude=target --exclude=third_party/prebuilt \
              -czvf target/release/ftllib.tar.gz -C .. ftl
      - name: Setting Up Rust
        uses: dtolnay/rust-toolchain@nightly   
        if: matrix.job == 'test'
      - name: Install Deno from .land
        if: matrix.os != 'self-hosted'
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Install Deno from source
        if: matrix.os == 'self-hosted'
        run: |
          echo "Check if Deno is already installed"
          if ! type deno > /dev/null; then
            echo "Deno is not installed, installing..."
            cargo install deno --locked
          else
            echo "Deno is already installed"
          fi
      - name: Error on warning
        run: echo "RUSTFLAGS=-D warnings" >> $GITHUB_ENV
      - name: Log versions
        shell: bash
        run: |
          rustc --version
          cargo --version
          deno --version
      - name: Cache Cargo home
        if: (matrix.job == 'test' && (matrix.profile == 'release' || matrix.profile == 'debug'))
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: 16-cargo-home-${{ matrix.os }}-${{ hashFiles('Cargo.lock') }}
          
      - name: Cache build output (main)
        uses: actions/cache@03e00da99d75a2204924908e1cca7902cafce66b
        if: (matrix.job == 'test' && matrix.profile == 'release') &&
            github.ref == 'refs/heads/main'
        with:
          path: |
            ./target
            !./target/*/gn_out
            !./target/*/*.dll
            !./target/*/*.so
            !./target/*/*.dylib
            !./target/*/*.tar.gz
          key: |
            16-cargo-target-${{ matrix.os }}-${{ matrix.profile }}-${{ github.sha }}
      - name: Cache build output (PR)
        uses: actions/cache@03e00da99d75a2204924908e1cca7902cafce66b
        if: github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') &&
            matrix.job == 'test' && matrix.profile == 'release'
        with:
          path: |
            ./target
            !./dist
            !./target/*/gn_out
            !./target/*/*.dll
            !./target/*/*.so
            !./target/*/*.dylib
            !./target/*/*.tar.gz
          key: never_saved
          restore-keys: |
            16-cargo-target-${{ matrix.os }}-${{ matrix.profile }}-

      - name: Skip save cache (PR)
        run: echo "CACHE_SKIP_SAVE=true" >> $GITHUB_ENV
        shell: bash
        if: github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') &&
            matrix.job == 'test' && matrix.profile == 'release'

      - name: Shallow clone crates.io index
        if: matrix.job == 'test' && matrix.profile == 'release'
        shell: bash
        run: |
          if [ ! -d ~/.cargo/registry/index/github.com-1ecc6299db9ec823/.git ]
          then
            git clone --depth 1 --no-checkout                      \
                      https://github.com/rust-lang/crates.io-index \
                      ~/.cargo/registry/index/github.com-1ecc6299db9ec823
          fi
      - name: Test FMT
        if: matrix.job == 'lint'
        run: deno task fmt
      - name: Test LINT
        if: matrix.job == 'lint'
        run: deno task lint

      - name: Build debug unix x64
        if: |
          (startsWith(matrix.os, 'ubuntu') ||  startsWith(matrix.os, 'macos')) &&
          (matrix.job == 'test' && matrix.profile == 'debug')
        run: deno task cargo-build --all-targets
      - name: Build debug unix arch64
        if: |
          (startsWith(matrix.os, 'self-hosted')) &&
          (matrix.job == 'test' && matrix.profile == 'debug') 
        run: |
          deno task cargo-build-arm
      - name: Build debug Windows
        if: |
          runner.os == 'Windows' &&
          matrix.job == 'test' &&
          matrix.profile == 'debug'
        env:
          OPENSSL_LIB_DIR: ${{ github.workspace }}\unreliablertc\openssl\lib
          OPENSSL_INCLUDE_DIR: ${{ github.workspace }}\unreliablertc\openssl\include
          OPENSSL_DIR: ${{ github.workspace }}\unreliablertc\openssl
          OPENSSL_STATIC: 1
          OPENSSL_STATIC_LIB_DIR: ${{ github.workspace }}\unreliablertc\openssl\lib
          CARGO_PROFILE_DEV_DEBUG: 0
        run: |
          deno task cargo-build --all-targets

      - name: Build release Unix x64
        if: |
          (startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')) &&
          (matrix.job == 'test' && matrix.profile == 'release') && (matrix.use_sysroot ||
          (github.repository == 'hironichu/FTL' &&
          (github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/'))))
        run: deno task cargo-build --release
      - name: Build release Unix Aarch64
        if: |
          (startsWith(matrix.os, 'self-hosted')) &&
          (matrix.job == 'test' && matrix.profile == 'release') && (matrix.use_sysroot ||
          (github.repository == 'hironichu/FTL' &&
          (github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/'))))
        run: |
          deno task cargo-release-arm
      - name: Build release Windows
        if: |
          runner.os == 'Windows' &&
          matrix.job == 'test' &&
          matrix.profile == 'release'
        env:
          OPENSSL_LIB_DIR: ${{ github.workspace }}\unreliablertc\openssl\lib
          OPENSSL_INCLUDE_DIR: ${{ github.workspace }}\unreliablertc\openssl\include
          OPENSSL_DIR: ${{ github.workspace }}\unreliablertc\openssl
          OPENSSL_STATIC: 1
          OPENSSL_STATIC_LIB_DIR: ${{ github.workspace }}\unreliablertc\openssl\lib
        run: |
          deno task cargo-build

      - name: Run deno test (debug)
        if: |
          matrix.job == 'test' && matrix.profile == 'debug' &&
          !startsWith(github.ref, 'refs/tags/')
        run: |
          deno task test
      - name: Run deno test (release)
        if: |
          (matrix.job == 'test' && matrix.profile == 'release') &&
          (matrix.use_sysroot || (
          github.repository == 'hironichu/FTL' &&
          github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')))
        run: |
          deno task test
      - name: Upload release to GitHub
        uses: softprops/action-gh-release@59c3b4891632ff9a897f99a91d7bc557467a3a22
        if: |
          (matrix.job == 'test' && matrix.profile == 'release') &&
          github.repository == 'hironichu/FTL' &&
          github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/ftl.dll
            dist/libftl.so
            dist/libftl_aarch64.so
            dist/libftl.dylib
          draft: true